openapi: 3.0.0
info:
  title: API сервер для учебного-проекта «SIX-CITY».
  description: |-
    * Список ресурсов и маршрутов сервера «SIX-CITY».
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 2.0.0

tags:
  - name: offers
    description: Действия с объявлениями.
  - name: users
    description: Действия с пользователем.
  - name: comments
    description: Действия с комментариями.
  - name: favorites
    description: Действия с избранным.

paths:
  /offers:
    post:
      tags:
        - offers
      parameters:
        [
          {
            in: "header",
            name: "x-token",
            required: true,
            schema: { type: "string" },
            description: Токен пользователя.,
          },
        ]
      summary: Создание нового предложения по аренде.
      description: Создает новое предложение по аренде.

      security:
        - BearerAuth: []

      requestBody:
        description: Информация для создания нового предложения.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createOfferDto"
        required: true

      responses:
        "201":
          description: Предложение создано. Объект предложения.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/offerRdo"

        "400":
          description: Указаны некорректные данные.

        "401":
          description: Пользователь не авторизован.

    get:
      tags:
        - offers
      summary: Получение списка предложений по аренде.
      description: Получает список предложений по аренде.

      responses:
        "200":
          description: Получение списка предложений.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/shortOfferRdo"

  /offers/{offerId}:
    get:
      tags:
        - offers
      summary: Получение детальной информации о предложении.
      description: Получает детальную информации о предложении по аренде.

      responses:
        "200":
          description: Получение детальной информации о предложении. Объект предложения.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/offerRdo"

        "400":
          description: Ошибка запроса.

    patch:
      tags:
        - offers
      parameters:
        [
          {
            in: "header",
            name: "x-token",
            required: true,
            schema: { type: "string" },
            description: Токен пользователя.,
          },
        ]
      summary: Редактирование предложения.
      description: Редактирует предложение по аренде.

      security:
        - BearerAuth: []

      requestBody:
        description: Информация для редактирования предложения.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createOfferDto"
        required: true

      responses:
        "200":
          description: Предложение успешно отредактировано.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/offerRdo"

        "400":
          description: Указаны некорректные данные.

        "401":
          description: Пользователь не авторизован.

        "405":
          description: Только владелец может вносить изменения в объект.

    delete:
      tags:
        - offers
      parameters:
        [
          {
            in: "header",
            name: "x-token",
            required: true,
            schema: { type: "string" },
            description: Токен пользователя.,
          },
        ]
      summary: Удаление предложения.
      description: Удаляет предложение по аренде.

      security:
        - BearerAuth: []

      responses:
        "204":
          description: Предложение успешно удалено.

        "400":
          description: Ошибка запроса.

        "401":
          description: Пользователь не авторизован.

        "405":
          description: Только владелец может удалять объект.

  /offers/{cityName}/premium:
    get:
      tags:
        - offers
      summary: Получение премиальных предложений в городе.
      description: Получает список премиальных предложений (не более 3 с флагом «Premium»).

      responses:
        "200":
          description: Список премиальных предложений. Объект предложения.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/shortOfferRdo"

        "400":
          description: Ошибка запроса.

  /users/register:
    post:
      tags:
        - users
      summary: Регистрация пользователя.
      description: Регистрирует нового пользователя.

      requestBody:
        description: Информация для создания нового пользователя.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createUserDto"
        required: true

      responses:
        "201":
          description: Пользователь зарегистрирован. Объект пользователя.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userRdo"

        "400":
          description: Неправильные регистрационные данные.

        "405":
          description: Создавать новых пользователей могут только анонимные клиенты.

        "409":
          description: Пользователь с таким email уже существует.

  /users/login:
    post:
      tags:
        - users
      summary: Авторизация пользователя.
      description: Авторизует пользователя на основе логина и пароля.

      requestBody:
        description: Информация для авторизации пользователя.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/loginUserDto"
        required: true

      responses:
        "200":
          description: Пользователь авторизован. Токен пользователя.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/loggedUserRdo"

        "401":
          description: Неверный логин или пароль.

        "404":
          description: Пользователь не существует.

    get:
      tags:
        - users
      parameters:
        [
          {
            in: "header",
            name: "x-token",
            required: true,
            schema: { type: "string" },
            description: Токен пользователя.,
          },
        ]
      summary: Проверка состояния пользователя.
      description: Возвращает информацию по авторизованному пользователю.

      security:
        - BearerAuth: []

      responses:
        "200":
          description: Пользователь авторизован. Объект пользователя.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userRdo"

        "401":
          description: Пользователь не авторизован.

  /users/{userId}/avatar:
    post:
      tags:
        - users
      parameters:
        [
          {
            in: "header",
            name: "x-token",
            required: true,
            schema: { type: "string" },
            description: Токен пользователя.,
          },
        ]
      summary: Загрузить изображение аватара.
      description: Загружает изображение аватара пользователя.

      security:
        - BearerAuth: []

      requestBody:
        description: Изображение аватара должно быть в формате `png` или `jpg`.
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/uploadFile"
        required: true

      responses:
        "201":
          description: Аватар успешно загружен.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/uploadUserAvatarRdo"

        "400":
          description: Пользователя не существует (Неправильные данные).

        "401":
          description: Пользователь не авторизован.

        "405":
          description: Только владелец может вносить изменения в объект.

  /comments/{offerId}:
    post:
      tags:
        - comments
      parameters:
        [
          {
            in: "header",
            name: "x-token",
            required: true,
            schema: { type: "string" },
            description: Токен пользователя.,
          },
        ]
      summary: Добавляет комментарий.
      description: Добавляет новый комментарий к предложению.

      security:
        - BearerAuth: []

      requestBody:
        description: Информация для создания нового комментария.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createCommentDto"
        required: true

      responses:
        "201":
          description: Комментарий создан. Объект комментария.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commentRdo"

        "400":
          description: Неправильные данные.

        "401":
          description: Пользователь не авторизован.

        "404":
          description: Файл не найден.

    get:
      tags:
        - comments
      summary: Получение списка комментариев для предложения.
      description: Получает список комментариев для предложения.

      responses:
        "200":
          description: Получение комментариев. Массив объектов комментариев.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/commentRdo"

        "400":
          description: Ошибка запроса.

  /favorites:
    get:
      tags:
        - favorites
      parameters:
        [
          {
            in: "header",
            name: "x-token",
            required: true,
            schema: { type: "string" },
            description: Токен пользователя.,
          },
        ]
      summary: Получение списка избранных предложений.
      description: Получает список избранных предложений.

      security:
        - BearerAuth: []

      responses:
        "200":
          description: Получение списка избранных предложений. Массив объектов предложений.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/shortOfferRdo"

        "400":
          description: Ошибка запроса.

        "401":
          description: Пользователь не авторизован.

    post:
      tags:
        - favorites
      parameters:
        [
          {
            in: "header",
            name: "x-token",
            required: true,
            schema: { type: "string" },
            description: Токен пользователя.,
          },
        ]
      summary: Добавляет и удаляет предложение в/из списка избранных.
      description: Добавление и удаление предложения в/из списка избранных.

      security:
        - BearerAuth: []

      responses:
        "201":
          description: Добавляет предложение в список избранных.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/favoriteRdo"

        "204":
          description: Удаляет предложение из списка избранных.

        "400":
          description: Ошибка запроса.

        "401":
          description: Пользователь не авторизован.

components:
  schemas:
    createOfferDto:
      type: object
      properties:
        title:
          type: string
          example: Lorem ipsum dolor sit amet.
        description:
          type: string
          example: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
        city:
          type: string
          enum: [Paris, Amsterdam, Cologne, Brussels, Dusseldorf, Hamburg]
          example: Dusseldorf
        preview:
          type: string
          example: https://www.dussrldorf.com/imagePre.jpg
        photos:
          type: array
          items:
            type: string
          example:
            [
              https://www.dussrldorf.com/image1.jpg,
              https://www.dussrldorf.com/image2.jpg,
              https://www.dussrldorf.com/image3.jpg,
              https://www.dussrldorf.com/image4.jpg,
              https://www.dussrldorf.com/image5.jpg,
              https://www.dussrldorf.com/image6.jpg,
            ]
        isPremium:
          type: boolean
          example: true
        housingTypeType:
          type: string
          enum: [apartment, house, room, hotel]
          example: house
        roomCount:
          type: number
          example: 1
        guestCount:
          type: number
          example: 7
        rentPrice:
          type: number
          example: 10000
        features:
          type: array
          items:
            type: string
            enum:
              [
                Breakfast,
                Air conditioning,
                Laptop friendly workspace,
                Baby seat,
                Washer,
                Towels,
                Fridge,
              ]
          example: [Breakfast, Towels]
        location:
          type: array
          items:
            type: string
          example: [51.225402, 6.776314]

    offerRdo:
      type: object
      properties:
        title:
          type: string
          example: Lorem ipsum dolor sit amet.
        description:
          type: string
          example: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
        postDate:
          type: string
          format: date-time
          example: "2023-10-17T11:11:11.111Z"
        city:
          type: string
          enum: [Paris, Amsterdam, Cologne, Brussels, Dusseldorf, Hamburg]
          example: Dusseldorf
        preview:
          type: string
          example: https://www.dussrldorf.com/imagePre.jpg
        photos:
          type: array
          items:
            type: string
          example:
            [
              https://www.dussrldorf.com/image1.jpg,
              https://www.dussrldorf.com/image2.jpg,
              https://www.dussrldorf.com/image3.jpg,
              https://www.dussrldorf.com/image4.jpg,
              https://www.dussrldorf.com/image5.jpg,
              https://www.dussrldorf.com/image6.jpg,
            ]
        isPremium:
          type: boolean
          example: true
        isFavorite:
          type: boolean
          example: false
        rating:
          type: number
          example: 0
        housingType:
          type: string
          enum: [apartment, house, room, hotel]
          example: house
        roomCount:
          type: number
          example: 1
        guestCount:
          type: number
          example: 7
        rentPrice:
          type: number
          example: 10000
        features:
          type: array
          items:
            type: string
            enum:
              [
                Breakfast,
                Air conditioning,
                Laptop friendly workspace,
                Baby seat,
                Washer,
                Towels,
                Fridge,
              ]
          example: [Breakfast, Towels]
        commentsCount:
          type: number
          example: 0
        location:
          type: array
          items:
            type: string
          example: [51.225402, 6.776314]
        userId:
          $ref: "#/components/schemas/userRdo"

    shortOfferRdo:
      type: object
      properties:
        title:
          type: string
          example: Lorem ipsum dolor sit amet.
        postDate:
          type: string
          format: date-time
          example: "2023-10-17T11:11:11.111Z"
        city:
          type: string
          enum: [Paris, Amsterdam, Cologne, Brussels, Dusseldorf, Hamburg]
          example: Dusseldorf
        preview:
          type: string
          example: https://www.dussrldorf.com/imagePre.jpg
        isPremium:
          type: boolean
          example: true
        isFavorite:
          type: boolean
          example: false
        rating:
          type: number
          example: 0
        housingType:
          type: string
          enum: [apartment, house, room, hotel]
          example: house
        rentPrice:
          type: number
          example: 10000
        commentsCount:
          type: number
          example: 0

    createUserDto:
      type: object
      properties:
        name:
          type: string
          example: Keks
        email:
          type: string
          example: keks@cot.da
        avatar:
          type: string
          example: keks.png
        isProType:
          type: boolean
          example: false
        password:
          type: string
          example: 123456

    userRdo:
      type: object
      properties:
        id:
          type: string
          example: lala57lul965lol86
        name:
          type: string
          example: Keks
        avatar:
          type: string
          example: keks.png
        isProType:
          type: boolean
          example: false

    loginUserDto:
      type: object

      properties:
        email:
          type: string
          example: keks@cot.da

        password:
          type: string
          example: 123456

    loggedUserRdo:
      type: object

      properties:
        token:
          type: string
          example: qwerty653dvh778c67i3xi3

    uploadFile:
      type: object

      properties:
        file:
          type: string
          example: "upload/1122334455.jpeg"

    uploadUserAvatarRdo:
      type: object

      properties:
        filepath:
          type: string
          example: "cca3d724-17c5-4fd3-9982-dde3cba150cf.png"

    createCommentDto:
      type: object
      properties:
        text:
          type: string
          example: Lorem ipsum dolor sit amet.
        rating:
          type: number
          example: 5

    commentRdo:
      type: object
      properties:
        text:
          type: string
          example: Lorem ipsum dolor sit amet.
        rating:
          type: number
          example: 5
        postDate:
          type: string
          example: 2023-11-01T14:14:14.333Z
        author:
          $ref: "#/components/schemas/userRdo"

    favoriteRdo:
      type: object
      properties:
        offerId:
          $ref: "#/components/schemas/shortOfferRdo"
        userId:
          $ref: "#/components/schemas/userRdo"
